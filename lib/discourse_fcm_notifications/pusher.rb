# frozen_string_literal: true

require "net/https"

module ::DiscourseFcmNotifications
  class Pusher
    @@last_token = ""
    @@last_time = nil

    def self.push(user, payload)
      message = {
        title: I18n.t(
          "discourse_fcm_notifications.popup.#{Notification.types[payload[:notification_type]]}",
          site_title: SiteSetting.title,
          topic: payload[:topic_title],
          username: payload[:username]
        ),
        message: payload[:excerpt],
        url: "#{Discourse.base_url}/#{payload[:post_url]}"
      }
      self.send_notification(user, message)
    end

    # checks if a message was sent to the same user less than 2 minutes ago, to prevent flurry of notifications
    def self.already_sent?(user)
      token = user.custom_fields[DiscourseFcmNotifications::PLUGIN_NAME]
      if (@@last_token == token) and (@@last_time.is_a?(Time) && (@@last_time < 2.minutes.ago))
        Rails.logger.info "Already sent a notification to #{user.username} less than 2 minutes ago"
        true
      else
        @@last_token = token
        @@last_time = Time.now
        false
      end
    end

    def self.confirm_subscribe(user)
      message = {
        title: I18n.t(
          "discourse_fcm_notifications.confirm_title",
          site_title: SiteSetting.title,
        ),
        message: I18n.t("discourse_fcm_notifications.confirm_body"),
        url: "#{Discourse.base_url}"
      }
      self.send_notification(user, message)
    end

    # subscription should be a string automatically generated by the iPhone / Android phone
    def self.subscribe(user, subscription)
      user.custom_fields[DiscourseFcmNotifications::PLUGIN_NAME] = subscription
      user.save_custom_fields(true)
    end

    def self.unsubscribe(user)
      user.custom_fields.delete(DiscourseFcmNotifications::PLUGIN_NAME)
      user.save_custom_fields(true)
    end

    private

    def self.send_notification(user, message_hash) 
      if user and message_hash and !self.already_sent?(user) 
        Rails.logger.info "Sending a notification to #{user.username} about #{message_hash[:title]}"
        filename = "gcp_key.json"
        if !File.exist?(filename) and SiteSetting.fcm_notifications_google_json
          File.open(filename, 'w') { |file| file.write(SiteSetting.fcm_notifications_google_json) }
        end
        raise "Error: Missing google json for push notifications" unless File.exist?(filename)
        
        fcm = FCM.new(SiteSetting.fcm_notifications_api_key, filename, SiteSetting.fcm_notifications_project_id)

        message = {
          'token': user.custom_fields[DiscourseFcmNotifications::PLUGIN_NAME],
          'data': {
            "linked_obj_type" => 'link',
            "linked_obj_data" => message_hash[:url],
          },
          'notification': {
            title: message_hash[:title],
            body: message_hash[:message],
          },
          'android': {
            "priority": "normal",
          },
          'apns': {
            headers:{
              "apns-priority":"5"
            },
            payload: {
              aps: {
                "category": "#{Time.zone.now.to_i}",
                "sound": "default",
                "interruption-level": "active"
              }
            },
          },
          'fcm_options': {
            "analytics_label": "Label"
          }
        }


        response = fcm.send_v1(message)
        if response[:response] == 'success'
          Rails.logger.info "Successfully sent push notification about #{message_hash[:title]} to token " + user.custom_fields[DiscourseFcmNotifications::PLUGIN_NAME].to_s 
          return true
        else
          if response[:status_code] == 400
            txt = "ERROR: push notification was malformed. Tried to send notif about #{message_hash[:title]} to token " 
            txt += user.custom_fields[DiscourseFcmNotifications::PLUGIN_NAME].to_s + " and body response was: " + response[:body].to_s
            Rails.logger.error txt
          elsif response[:status_code] == 404
            Rails.logger.error "Possible error: push notification was sent to a token that is no longer valid. Unsubscribing user " + user.custom_fields[DiscourseFcmNotifications::PLUGIN_NAME].to_s
            self.unsubscribe user
          else 
            Rails.logger.error "ERROR: something was wrong with the push notification, code #{response[:status_code]}. Body: " + response[:body].to_s
          end
          return false
        end  
      end    
    end
  end

end
